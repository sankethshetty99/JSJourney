Node can control the v8 engine options nice

node -c app.js #check for syntax issues

node -p #print "code"
node e #evaluate "code"

# core modules are accessible by default while evaluating
fs

node -r #prerequire, one file before running another file like custom modules

node --inspect app.js #inspect modules
node --inspect-brk app.js  #inspect with active breakpoint. stops at the first line of executable code
chrome://inspect/  --> this connects to any debugging opportunity using web sockets

debugger; keyword

#JS datatypes
null
undefined - an unassigned variable, a non existent property, a functiom that does not return anything returns undefined
Boolean - t/f
String - template literals, immutable
Number - floating point=> integers and the decimals 2^53-1
BigInt - no limits.
Symbol

use typeof to checktype

arrays are objects - push pop shift unshift
functions are objects

All JavaScript objects have prototypes. A prototype is an implicit reference to another object that is queried in property lookups.

.hasOwnProperty(propname)
doesnt look at prototype properties

iterate over properties
or (let property in duck)

Bird.prototype.isPrototypeOf(duck); #true
Object.prototype.isPrototypeOf(Bird.prototype);

Object is a supertype for all objects in JavaScript

Bird.prototype = Object.create(Animal.prototype);
Always reset the inherited contructor for this prototype
Bird.prototype.constructor = Bird;

If an object doesn't have a particular property, the object's prototype is checked for that property.
If the object's prototype does not have that property, the object's prototype's prototype is checked and so on.
This is how inheritance in JavaScript works, JavaScript is a prototypal language

const obj = { id: 999, fn: function () { console.log(this.id) } }
obj.fn() // prints 999

When a function is assigned to an object, when the implicit this keyword is accessed within that function it will refer to the object on which the function was called. This is why obj.fn() 

It's crucial to understand that this refers to the object on which the function was called, not the object which the function was assigned to:

const obj = { id: 999, fn: function () { console.log(this.id) } }
const obj2 = { id: 2, fn: obj.fn }
obj2.fn() // prints 2
obj.fn() // prints 999

Functions have a call method that can be used to set their this context:
fn.call(obj) # univeral !

Lambda functions do not have their own this context, when this is referenced inside a function, it refers to the this of the nearest parent non-lambda function.

function fn() {
  return (offset) => {
   console.log(this.id + offset)
  }
}
const obj = { id: 999 }
const offsetter = fn.call(obj)
offsetter(1) // prints 1000 (999 + 1)

While normal functions have a prototype property (which will be discussed in detail shortly), fat arrow functions do not:

function normalFunction () { }
const fatArrowFunction = () => {}
console.log(typeof normalFunction.prototype) // prints 'object'
console.log(typeof fatArrowFunction.prototype) // prints 'undefined'


The Object.getOwnPropertyDescriptor can be used to get a property descriptor on any object

When creating a new object --> Object.create() --> the prototypical way !

PROTOTYPICAL inheritance chaining
1. Functional
2. Constructor functions --> legacy learnt from codegauge
3. Class syntax contructors
The class keyword is syntactic sugar that actually creates a function. Specifically it creates a function that should be called with new.


Tool.prototype points to the prototype object for all the instances of that function.
Tool.prototype --> {properties, functions } --> inherited by all the instances using Tool as their constructor function.

Closure - refer to the codegauage notes.

==============================================================================================================

NPM

Semver range version number 
Semver format. 3 numbers major, minor, patch
Semver range

caret ranges ^ - doesnt allow major version change
^1.2.3 := >=1.2.3 <2.0.0
^0.2.3 := >=0.2.3 <0.3.0 (0 seems to be special)
^1.x := >=1.0.0 <2.0.0
^0.x := >=0.0.0 <1.0.0

tilde ranges ~ - doesnt allow minor version change
~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (Same as 1.2.x)
~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0


npm install --save-dev standard
// installs dev dependencies

npm install --production
// installs only dependencies not the dev dependencies


npm test , npm start are defaults
everything else npm run "script"

------------------
if (require.main === module)

Using this , you can change behavior if this is invoked as the main js or 

module.exports = reverseAndUpper
when used to import into other js modules

require.resolve. This can be used to determine the absolute path for any required module.

==============================================================================================================
A promise is an object that represents an asynchronous operation. It's either pending or settled, and if it is settled it's either resolved or rejected.
// standard way of importing promisified.
const { readFile } = require('fs').promises

*
The true power of promises is to avoid callback hell !!
USing then chaining. 
If a value is returned from then, the then method will return a promise that resolves to that value
If a promise is returned from a then handler, the then method will return that promise

The Promise.all function takes an array of promises
const readers = files.map((file) => readFile(file))
// readers is fileld with the arrays
Promise.all(readers)
  .then(print) // print takes array and does concat
  .catch(console.error)
// returns a promise that resolves when all the promises resolve

The Promise.allSettled function returns an array of objects representing the settled status of each promise // 'fulfilled' 'rejected'

if we want promises to run in parallel independently we can either use Promise.anySettled or simple execute each of them with their own then and catch handlers:

---------
async await

An async function always returns a promise ! 
have to do then/catch on the result !
The async/await syntax allows for declarative asynchronous implementations.

The async/await syntax is highly specialized for serial control flow. The trade-off is that parallel execution in async functions with using Promise.all, Promise.allSettled, Promise.any or Promise.race can become difficult or unintuitive to reason about

For scenarios where operations *must* be sequentially called this is fitting.
However for scenarios where the output only has to be ordered, but the order in which asynchronous operations resolves is immaterial we can again use Promise.all

CALLBACKS / PROMISES.then / AYSYNC await
All for these are syntaxes to execute synchromous code.
But the main thread is not held up.
the waiting is offloaded to the kernel.


==============================================================================================================
EVENTS

myEmitter.emit('an-event', some, args)
// namespace, 


==============================================================================================================
ERROR throwing
There are six other native error constructors that inherit from the base Error constructor, these are:

EvalError
SyntaxError
RangeError
ReferenceError
TypeError
URIError

throw new Error('this is an error message')
* typeof comparisons
* var err= new SyntaxError(); err instanceof SyntaxError // true


-----

client code - handles err.

server code - that throws the err.
when throwing err, attach a err.code="SOME_DESCRIPTION"

if client is not handling certain errors,
it throws it up the stack(error propagation) to whoever the client's client is.

the error propagation logic is entirely upto the context, which ones to propagate. which ones to catch at ehich layer

error throwing and catching can be done in all 3 paradigms
1. synchronous code 
simple try catch
2. callbacks 
- you pass in the callback fn to doSome(val, (err, result)) [this is called an error first callback]
- if err, the cb will call you with new Errors, 
- if not cb will call u with cb(null, result)
3. Promises/ async await 
(async await is a friendlier syntax to use as it resembles synchronous)
the error is propagated using the reject(new Err....), so u can catch handler.
All async functions return promises,
All then handlers return promises, therefore, catch handler.

* Apply duck-typing to error checks,
this is a technique, instead of checking the  err thrown at you,
if the err.code is activated, we can choose  to the check the err.code =="APPROPRIATE STRING". Because, instance of might be too broad, might be catching other errors in other lines rather than your critical function.


==============================================================================================================
BUFFER

ArrayBuffer == raw bytes in memory allocated.
const buffer = new ArrayBuffer(8) 

Upto you how you wantt to interpret it.

Interpret using Uint8Array for example,
This is the default view.
const view = new Uint8Array(buffer);
diff views have diff ranges
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays

diff between using Buffer and Uint8Array directly.
Buffer slices - ref to same memory
Uint8Array slices - creates new memory allocation.

//correct way to allocate memory not new keyword
const buffer2 = Buffer.alloc(10)

// unsafe way to use 
const buffer = Buffer.allocUnsafe(10),
memory is unlinked and not erased when not used. perf advantage, but security risk.

String to buffer
const buffer = Buffer.from('hello world')
//UTF-8 is a text encoding - a way of encoding text as binary data.

//Base64 is in some ways the opposite - it's a way of encoding arbitrary binary data as ASCII text.

const buffer = Buffer.from('ðŸ‘€')
console.log(buffer) // prints <Buffer f0 9f 91 80>
console.log(buffer.toString('hex')) // prints f09f9180
console.log(buffer.toString('base64')) // prints 8J+RgA==

Buffer to string
console.log(buffer.toString())

==============================================================================================================
FILE SYSTEM
Management of the file system is really achieved with two core modules, fs and path
__filename
__dirname

const { join } = require('path')
join(__dirname, 'out.txt')
path.join('foo', 'bar', 'baz') // works

path builders methods 


and path deconstructors methods
path.parse

---------
The fs module has lower level and higher level APIs.
Lower level APIs as these are rarely used in application code
The higher level methods for reading and writing are provided in four abstraction types:

Synchronous
Callback based
Promise based
Stream based






